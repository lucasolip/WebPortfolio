import{Texture}from"./texture.min.js";class Mesh{constructor(e,t=[0,0,0],i=[1,1,1]){this.time=0,this.device=e,this.position=t,this.scale=i,this.albedo=new Texture(this.device,"./Art/stone.jpg"),this.specular=new Texture(this.device,"./Art/stoneHeight.png"),this.vertices=new Float32Array([-1,0,-1,0,1,0,0,0,1,0,-1,0,1,0,1,0,1,0,1,0,1,0,1,1,-1,0,-1,0,1,0,0,0,1,0,1,0,1,0,1,1,-1,0,1,0,1,0,0,1]),this.vertexBuffer=e.createBuffer({label:"Mesh vertices",size:this.vertices.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST}),e.queue.writeBuffer(this.vertexBuffer,0,this.vertices),this.vertexBufferLayout={arrayStride:32,attributes:[{format:"float32x3",offset:0,shaderLocation:0},{format:"float32x3",offset:12,shaderLocation:1},{format:"float32x2",offset:24,shaderLocation:2}]},this.modelMatrix=mat4.create(),mat4.translate(this.modelMatrix,this.modelMatrix,this.position),mat4.scale(this.modelMatrix,this.modelMatrix,this.scale),this.initializeUniforms()}setAlbedo(e){this.albedo=new Texture(this.device,e)}setSpecular(e){this.specular=new Texture(this.device,e)}initializeUniforms(){this.uniformBuffer=this.device.createBuffer({label:"Uniform buffer",size:180,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),this.uniformValues=new Float32Array(45),this.kViewMatrixOffset=0,this.kModelMatrixOffset=16,this.kLightColorOffset=32,this.kLightDirectionOffset=36,this.kCameraPositionOffset=40,this.kTimeOffset=44,this.uniformValues.set(mat4.create(),this.kViewMatrixOffset),this.uniformValues.set(this.modelMatrix,this.kModelMatrixOffset),this.uniformValues.set([1,1,1,1],this.kLightColorOffset);var e=vec3.fromValues(0,.5,-1);vec3.normalize(e,e),console.log(e),this.uniformValues.set([...e],this.kLightDirectionOffset),this.uniformValues.set([0,0,0],this.kCameraPositionOffset),this.uniformValues.set(this.time,this.kTimeOffset)}async setPipeline(e){this.pipeline=e,this.bindGroup||(await this.albedo.ready,await this.specular.ready,this.bindGroup=this.device.createBindGroup({layout:this.pipeline.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:this.uniformBuffer}},{binding:1,resource:this.albedo.view},{binding:2,resource:this.specular.view},{binding:3,resource:this.albedo.sampler}]}))}update(e){this.uniformValues.set(e.getViewProjectionMatrix(),this.kViewMatrixOffset),this.time+=.01,this.uniformValues.set([this.time],this.kTimeOffset),this.uniformValues.set([...e.position],this.kCameraPositionOffset),this.device.queue.writeBuffer(this.uniformBuffer,0,this.uniformValues)}draw(e){e.setVertexBuffer(0,this.vertexBuffer),e.setBindGroup(0,this.bindGroup),e.draw(this.vertices.length/8)}}export{Mesh};