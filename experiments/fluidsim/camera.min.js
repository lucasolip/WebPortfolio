class Camera{constructor(t,i,e){this.position=t,this.startPosition=[...t],this.target=i,this.up=[0,1,0],this.radius=t[2],this.horizontalAngle=0,this.horizontalAngleVelocity=0,this.verticalAngle=0,this.verticalAngleVelocity=0,this.drag=.1,this.horizontalSensitivity=.008,this.verticalSensitivity=.01,this.updateProjectionMatrix(e)}getViewProjectionMatrix(){return this.viewMatrix=mat4.lookAt(mat4.create(),this.position,this.target,this.up),this.viewProjectionMatrix=mat4.multiply(mat4.create(),this.projectionMatrix,this.viewMatrix),this.viewProjectionMatrix}updateProjectionMatrix(t,i=45,e=.1,r=1e3){this.projectionMatrix=mat4.perspective(mat4.create(),i*Math.PI/180,t,e,r)}rotate(){this.horizontalAngle+=this.horizontalAngleVelocity,this.verticalAngle+=this.verticalAngleVelocity,this.verticalAngle<-Math.PI/2&&(this.verticalAngle=-Math.PI/2),0<this.verticalAngle&&(this.verticalAngle=0),this.horizontalAngleVelocity-=this.horizontalAngleVelocity*this.drag,this.verticalAngleVelocity-=this.verticalAngleVelocity*this.drag,vec3.rotateX(this.position,this.startPosition,this.target,this.verticalAngle),vec3.rotateY(this.position,this.position,this.target,this.horizontalAngle)}zoom(t){this.radius+=.01*t,this.radius<.1&&(this.radius=.1),this.startPosition[2]=this.radius}update(t){this.horizontalAngleVelocity=-t[0]*this.horizontalSensitivity,this.verticalAngleVelocity=-t[1]*this.verticalSensitivity}setAspect(t){this.aspect=t,this.updateProjectionMatrix(t)}ndcToWorldRay(t,i){var e=mat4.create(),r=(mat4.multiply(e,this.projectionMatrix,this.viewMatrix),mat4.invert(e,e),vec4.fromValues(t,i,-1,1)),t=vec4.fromValues(t,i,1,1),i=(vec4.transformMat4(r,r,e),vec4.transformMat4(t,t,e),vec3.fromValues(r[0]/r[3],r[1]/r[3],r[2]/r[3])),e=vec3.fromValues(t[0]/t[3],t[1]/t[3],t[2]/t[3]),r=vec3.create();return vec3.subtract(r,e,i),vec3.normalize(r,r),{origin:i,direction:r}}screenToNDC(t,i,e){return[2*t/e.width-1,1-2*i/e.height]}intersectRayPlane(t,i,e){var r=vec3.dot(i,t.direction);if(1e-6<Math.abs(r)){var a=vec3.create(),e=(vec3.subtract(a,e,t.origin),vec3.dot(a,i)/r);if(0<=e)return a=vec3.create(),vec3.scaleAndAdd(a,t.origin,t.direction,e),a}return null}}export{Camera};