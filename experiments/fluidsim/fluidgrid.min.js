import{loadFile}from"./file-handling.min.js";class FluidGrid{constructor(e,i=128){this.init(e,i)}initTextures(e){this.sampler3D=e.createSampler({magFilter:"linear",minFilter:"linear",mipmapFilter:"linear",addressModeU:"repeat",addressModeV:"repeat",addressModeW:"repeat"}),this.densityTexture=e.createTexture({dimension:"3d",size:[this.width,this.height,this.depth],format:"r32float",usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING}),this.newDensity=e.createTexture({dimension:"3d",size:[this.width,this.height,this.depth],format:"r32float",usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING}),this.velocityX=e.createTexture({dimension:"3d",size:[this.width,this.height,this.depth],format:"r32float",usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING}),this.velocityY=e.createTexture({dimension:"3d",size:[this.width,this.height,this.depth],format:"r32float",usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING}),this.velocityZ=e.createTexture({dimension:"3d",size:[this.width,this.height,this.depth],format:"r32float",usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING}),this.newVelocityX=e.createTexture({dimension:"3d",size:[this.width,this.height,this.depth],format:"r32float",usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING}),this.newVelocityY=e.createTexture({dimension:"3d",size:[this.width,this.height,this.depth],format:"r32float",usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING}),this.newVelocityZ=e.createTexture({dimension:"3d",size:[this.width,this.height,this.depth],format:"r32float",usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING}),this.solid=e.createTexture({dimension:"3d",size:[this.width,this.height,this.depth],format:"r32float",usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING});var r=new Float32Array(this.width*this.height*this.depth);vec3.fromValues(this.width/2,this.height,this.depth/2);for(let t=0;t<this.depth;t++)for(let i=0;i<this.height;i++)for(let e=0;e<this.width;e++){vec3.fromValues(e,i,t);0==e||0==i||0==t||e==this.width-1||i==this.height-1||t==this.depth-1?r[e+i*this.width+t*this.width*this.height]=0:r[e+i*this.width+t*this.width*this.height]=1}e.queue.writeTexture({texture:this.solid},r,{bytesPerRow:4*this.width,rowsPerImage:this.height},[this.width,this.height,this.depth])}initBuffers(e){this.uniformValues=new Float32Array([this.width,this.height,this.depth,0,-1e3,-1e3,-1e3,0,this.time]),this.uniformBuffer=e.createBuffer({size:Math.max(48,this.uniformValues.byteLength),usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),e.queue.writeBuffer(this.uniformBuffer,0,this.uniformValues),this.bindGroupLayout=e.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,storageTexture:{access:"write-only",format:this.densityTexture.format,viewDimension:"3d"}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{access:"write-only",format:this.velocityX.format,viewDimension:"3d"}},{binding:3,visibility:GPUShaderStage.COMPUTE,storageTexture:{access:"write-only",format:this.velocityY.format,viewDimension:"3d"}},{binding:4,visibility:GPUShaderStage.COMPUTE,storageTexture:{access:"write-only",format:this.velocityZ.format,viewDimension:"3d"}}]}),this.bindGroup=e.createBindGroup({layout:this.bindGroupLayout,entries:[{binding:0,resource:this.densityTexture.createView()},{binding:1,resource:{buffer:this.uniformBuffer}},{binding:2,resource:this.velocityX.createView()},{binding:3,resource:this.velocityY.createView()},{binding:4,resource:this.velocityZ.createView()}]}),this.projectionBindGroupLayout=e.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float",viewDimension:"3d"}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:2,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float",viewDimension:"3d"}},{binding:3,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float",viewDimension:"3d"}},{binding:4,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float",viewDimension:"3d"}},{binding:5,visibility:GPUShaderStage.COMPUTE,storageTexture:{access:"write-only",format:this.newVelocityX.format,viewDimension:"3d"}},{binding:6,visibility:GPUShaderStage.COMPUTE,storageTexture:{access:"write-only",format:this.newVelocityY.format,viewDimension:"3d"}},{binding:7,visibility:GPUShaderStage.COMPUTE,storageTexture:{access:"write-only",format:this.newVelocityZ.format,viewDimension:"3d"}}]}),this.projectionBindGroup=e.createBindGroup({layout:this.projectionBindGroupLayout,entries:[{binding:0,resource:this.solid.createView()},{binding:1,resource:{buffer:this.uniformBuffer}},{binding:2,resource:this.velocityX.createView()},{binding:3,resource:this.velocityY.createView()},{binding:4,resource:this.velocityZ.createView()},{binding:5,resource:this.newVelocityX.createView()},{binding:6,resource:this.newVelocityY.createView()},{binding:7,resource:this.newVelocityZ.createView()}]}),this.advectionBindGroupLayout=e.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float",viewDimension:"3d"}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:2,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}},{binding:3,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}},{binding:4,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}},{binding:5,visibility:GPUShaderStage.COMPUTE,storageTexture:{access:"write-only",format:this.newVelocityX.format,viewDimension:"3d"}},{binding:6,visibility:GPUShaderStage.COMPUTE,storageTexture:{access:"write-only",format:this.newVelocityY.format,viewDimension:"3d"}},{binding:7,visibility:GPUShaderStage.COMPUTE,storageTexture:{access:"write-only",format:this.newVelocityZ.format,viewDimension:"3d"}},{binding:8,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}},{binding:9,visibility:GPUShaderStage.COMPUTE,storageTexture:{access:"write-only",format:this.newDensity.format,viewDimension:"3d"}},{binding:10,visibility:GPUShaderStage.COMPUTE,sampler:{}}]}),this.advectionBindGroup=e.createBindGroup({layout:this.advectionBindGroupLayout,entries:[{binding:0,resource:this.solid.createView()},{binding:1,resource:{buffer:this.uniformBuffer}},{binding:2,resource:this.velocityX.createView()},{binding:3,resource:this.velocityY.createView()},{binding:4,resource:this.velocityZ.createView()},{binding:5,resource:this.newVelocityX.createView()},{binding:6,resource:this.newVelocityY.createView()},{binding:7,resource:this.newVelocityZ.createView()},{binding:8,resource:this.densityTexture.createView()},{binding:9,resource:this.newDensity.createView()},{binding:10,resource:this.sampler3D}]})}async initVolumeData(e){this.computeShaderCode=await loadFile("fluid-init.wgsl"),this.projectionShaderCode=await loadFile("fluidprojection.wgsl"),this.advectionShaderCode=await loadFile("fluidadvection.wgsl");var i=e.createComputePipeline({layout:e.createPipelineLayout({bindGroupLayouts:[this.bindGroupLayout]}),compute:{module:e.createShaderModule({code:this.computeShaderCode}),entryPoint:"main"}}),t=e.createCommandEncoder(),r=t.beginComputePass();r.setPipeline(i),r.setBindGroup(0,this.bindGroup),r.dispatchWorkgroups(Math.ceil(this.width/8),Math.ceil(this.height/4),Math.ceil(this.depth/8)),r.end(),e.queue.submit([t.finish()])}projectionStep(i,t,e){this.time+=.01,this.uniformValues.set([this.time],8),this.uniformValues.set([...e],4),i.queue.writeBuffer(this.uniformBuffer,0,this.uniformValues);var r=i.createComputePipeline({layout:i.createPipelineLayout({bindGroupLayouts:[this.projectionBindGroupLayout]}),compute:{module:i.createShaderModule({code:this.projectionShaderCode}),entryPoint:"projection"}});for(let e=0;e<this.projectionIterations;e++){this.projectionBindGroup=i.createBindGroup({layout:this.projectionBindGroupLayout,entries:[{binding:0,resource:this.solid.createView()},{binding:1,resource:{buffer:this.uniformBuffer}},{binding:2,resource:this.velocityX.createView()},{binding:3,resource:this.velocityY.createView()},{binding:4,resource:this.velocityZ.createView()},{binding:5,resource:this.newVelocityX.createView()},{binding:6,resource:this.newVelocityY.createView()},{binding:7,resource:this.newVelocityZ.createView()}]});var s=t.beginComputePass();s.setPipeline(r),s.setBindGroup(0,this.projectionBindGroup),s.dispatchWorkgroups(Math.ceil(this.width/8),Math.ceil(this.height/4),Math.ceil(this.depth/8)),s.end(),[this.velocityX,this.newVelocityX]=[this.newVelocityX,this.velocityX],[this.velocityY,this.newVelocityY]=[this.newVelocityY,this.velocityY],[this.velocityZ,this.newVelocityZ]=[this.newVelocityZ,this.velocityZ]}}advectionStep(e,i){var e=e.createComputePipeline({layout:e.createPipelineLayout({bindGroupLayouts:[this.advectionBindGroupLayout]}),compute:{module:e.createShaderModule({code:this.advectionShaderCode}),entryPoint:"advection"}}),t=i.beginComputePass();t.setPipeline(e),t.setBindGroup(0,this.advectionBindGroup),t.dispatchWorkgroups(Math.ceil(this.width/8),Math.ceil(this.height/4),Math.ceil(this.depth/8)),t.end(),i.copyTextureToTexture({texture:this.newVelocityX},{texture:this.velocityX},{width:this.width,height:this.height,depthOrArrayLayers:this.depth}),i.copyTextureToTexture({texture:this.newVelocityY},{texture:this.velocityY},{width:this.width,height:this.height,depthOrArrayLayers:this.depth}),i.copyTextureToTexture({texture:this.newVelocityZ},{texture:this.velocityZ},{width:this.width,height:this.height,depthOrArrayLayers:this.depth}),i.copyTextureToTexture({texture:this.newDensity},{texture:this.densityTexture},{width:this.width,height:this.height,depthOrArrayLayers:this.depth})}init(e,i){this.width=i,this.height=i,this.depth=i,this.minBounds=[-1,-1,-1],this.maxBounds=[1,1,1],this.projectionIterations=15,this.time=0,this.initTextures(e),this.initBuffers(e)}}export{FluidGrid};